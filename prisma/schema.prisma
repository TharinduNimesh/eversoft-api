generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bloggers {
  id              Int             @id @default(autoincrement()) @db.UnsignedInt
  followers_count Int             @db.UnsignedInt
  user_id         Int             @unique(map: "user_id_UNIQUE") @db.UnsignedInt
  users           users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bloggers_users")
  collaborators   collaborators[]
  followers       followers[]
  posts           posts[]

  @@index([user_id], map: "fk_bloggers_users_idx")
}

model categories {
  id                  Int                   @id @default(autoincrement())
  category            String                @db.VarChar(45)
  post_has_categories post_has_categories[]
}

model collaborators {
  posts_id           Int              @db.UnsignedInt
  blogger_id         Int              @db.UnsignedInt
  created_at         DateTime?        @db.Timestamp(0)
  permission_type_id Int
  bloggers           bloggers         @relation(fields: [blogger_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collaborators_bloggers1")
  permission_types   permission_types @relation(fields: [permission_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collaborators_permission_types1")
  posts              posts            @relation(fields: [posts_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_posts_posts2")
  posts_updates      posts_updates[]

  @@id([posts_id, blogger_id])
  @@index([blogger_id], map: "fk_collaborators_bloggers1_idx")
  @@index([permission_type_id], map: "fk_collaborators_permission_types1_idx")
  @@index([posts_id], map: "fk_users_has_posts_posts2_idx")
}

model comments {
  id           BigInt   @id @default(autoincrement())
  comments     String   @db.Text
  is_edited    Int      @default(0) @db.TinyInt
  commented_at DateTime @db.Timestamp(0)
  user_id      Int      @db.UnsignedInt
  post_id      Int      @db.UnsignedInt
  posts        posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_posts_posts1")
  users        users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_posts_users1")

  @@index([post_id], map: "fk_users_has_posts_posts1_idx")
  @@index([user_id], map: "fk_users_has_posts_users1_idx")
}

model followers {
  user_id     Int      @db.UnsignedInt
  blogger_id  Int      @db.UnsignedInt
  followed_at DateTime @db.Timestamp(0)
  bloggers    bloggers @relation(fields: [blogger_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_bloggers_bloggers1")
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_bloggers_users1")

  @@id([user_id, blogger_id])
  @@index([blogger_id], map: "fk_users_has_bloggers_bloggers1_idx")
  @@index([user_id], map: "fk_users_has_bloggers_users1_idx")
}

model images {
  id          Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  path        String   @db.VarChar(255)
  uploaded_at DateTime @db.Timestamp(0)
}

model permission_types {
  id            Int             @id @default(autoincrement())
  type          String          @db.VarChar(255)
  collaborators collaborators[]
}

model post_has_categories {
  post_id     Int        @db.UnsignedInt
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_has_categories_categories1")
  posts       posts      @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_has_categories_posts1")

  @@id([post_id, category_id])
  @@index([category_id], map: "fk_posts_has_categories_categories1_idx")
  @@index([post_id], map: "fk_posts_has_categories_posts1_idx")
}

model posts {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  title               String                @db.VarChar(255)
  body                String                @db.LongText
  min_to_read         Int
  views               BigInt
  is_hidden           Int                   @default(0) @db.TinyInt
  posted_at           DateTime              @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  blogger_id          Int                   @db.UnsignedInt
  collaborators       collaborators[]
  comments            comments[]
  post_has_categories post_has_categories[]
  bloggers            bloggers              @relation(fields: [blogger_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_bloggers1")
  posts_updates       posts_updates[]

  @@index([blogger_id], map: "fk_posts_bloggers1_idx")
}

model posts_updates {
  id                      Int           @id @default(autoincrement())
  title                   String        @db.VarChar(255)
  body                    String        @db.LongText
  description             String        @db.VarChar(255)
  updated_at              DateTime      @db.Timestamp(0)
  is_approved             Int           @default(0) @db.TinyInt
  post_id                 Int           @db.UnsignedInt
  collaborator_post_id    Int           @db.UnsignedInt
  collaborator_blogger_id Int           @db.UnsignedInt
  collaborators           collaborators @relation(fields: [collaborator_post_id, collaborator_blogger_id], references: [posts_id, blogger_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_has_collaborators_collaborators1")
  posts                   posts         @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_has_collaborators_posts1")

  @@index([collaborator_post_id, collaborator_blogger_id], map: "fk_posts_has_collaborators_collaborators1_idx")
  @@index([post_id], map: "fk_posts_has_collaborators_posts1_idx")
}

model user_status {
  id     Int     @id @default(autoincrement())
  status String? @db.VarChar(45)
  users  users[]
}

model users {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  name           String          @db.VarChar(255)
  profile_img    String          @default("default.png") @db.VarChar(255)
  email          String          @unique(map: "email_UNIQUE") @db.VarChar(255)
  password       String          @db.VarChar(255)
  is_verified    Int             @default(0) @db.TinyInt
  joined_at      DateTime        @db.Timestamp(0)
  user_status_id Int
  bloggers       bloggers?
  comments       comments[]
  followers      followers[]
  user_status    user_status     @relation(fields: [user_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_user_status1")
  verifications  verifications[]

  @@index([user_status_id], map: "fk_users_user_status1_idx")
}

model verifications {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  code       String   @db.VarChar(255)
  is_used    Int      @default(0) @db.TinyInt
  expires_at DateTime @db.Timestamp(0)
  user_id    Int      @db.UnsignedInt
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_verifications_users1")

  @@index([user_id], map: "fk_verifications_users1_idx")
}
