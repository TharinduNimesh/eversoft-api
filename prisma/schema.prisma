generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blog {
  id         Int        @id @default(autoincrement())
  host       String     @db.VarChar(45)
  created_at DateTime   @db.Timestamp(0)
  bloggers   bloggers[]
  category   category[]
  follower   follower[]
  post       post[]
}

model category {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(45)
  blog_id           Int
  blog              blog                @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_blog1")
  post_has_category post_has_category[]

  @@index([blog_id], map: "fk_category_blog1_idx")
}

model comments {
  id          Int      @id @default(autoincrement())
  comment     String   @db.VarChar(45)
  created_at  DateTime @db.Timestamp(0)
  is_deleted  Int      @default(0) @db.TinyInt
  follower_id Int
  post_id     Int
  user_id     Int
  post        post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_post1")
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_user1")

  @@index([post_id], map: "fk_comments_post1_idx")
  @@index([user_id], map: "fk_comments_user1_idx")
}

model permission_type {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(45)
  bloggers bloggers[]
}

model post {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  body              String              @db.Text
  min_to_read       Int
  views             Int
  is_visible        Int                 @db.TinyInt
  created_at        DateTime            @db.Timestamp(0)
  blog_id           Int
  comments          comments[]
  blog              blog                @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_blog1")
  post_has_category post_has_category[]

  @@index([blog_id], map: "fk_post_blog1_idx")
}

model post_has_category {
  post_id     Int
  category_id Int
  category    category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_has_category_category1")
  post        post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_has_category_post1")

  @@id([post_id, category_id])
  @@index([category_id], map: "fk_post_has_category_category1_idx")
  @@index([post_id], map: "fk_post_has_category_post1_idx")
}

model refresh_token {
  id         Int      @id @default(autoincrement())
  token      String   @db.Text
  created_at DateTime @db.Timestamp(0)
  used_at    DateTime @db.Timestamp(0)
}

model user_type {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)
  user user[]
}

model bloggers {
  blog_id            Int
  user_id            Int
  created_at         DateTime?       @db.Timestamp(0)
  permission_type_id Int
  blog               blog            @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_blog_has_user_blog2")
  user               user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_blog_has_user_user2")
  permission_type    permission_type @relation(fields: [permission_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bloggers_permission_type1")

  @@id([blog_id, user_id])
  @@index([blog_id], map: "fk_blog_has_user_blog2_idx")
  @@index([user_id], map: "fk_blog_has_user_user2_idx")
  @@index([permission_type_id], map: "fk_bloggers_permission_type1_idx")
}

model follower {
  blog_id     Int
  user_id     Int
  followed_at DateTime? @db.Timestamp(0)
  blog        blog      @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_blog_has_user_blog1")
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_blog_has_user_user1")

  @@id([blog_id, user_id])
  @@index([blog_id], map: "fk_blog_has_user_blog1_idx")
  @@index([user_id], map: "fk_blog_has_user_user1_idx")
}

model user {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(80)
  email         String          @unique(map: "email_UNIQUE") @db.VarChar(60)
  password      String          @db.VarChar(255)
  is_verified   Int             @default(0) @db.TinyInt
  created_at    DateTime        @db.Timestamp(0)
  user_type_id  Int
  bloggers      bloggers[]
  comments      comments[]
  follower      follower[]
  user_type     user_type       @relation(fields: [user_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_type1")
  verifications verifications[]

  @@index([user_type_id], map: "fk_user_user_type1_idx")
}

model verifications {
  id                   BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  code                 String             @db.Text
  is_used              Int                @default(0) @db.TinyInt
  expires_at           DateTime           @db.Timestamp(0)
  created_at           DateTime           @db.Timestamp(0)
  user_id              Int
  verification_type_id Int
  user                 user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_verifications_user1")
  verification_types   verification_types @relation(fields: [verification_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_verifications_verification_types1")

  @@index([user_id], map: "fk_verifications_user1_idx")
  @@index([verification_type_id], map: "fk_verifications_verification_types1_idx")
}

model verification_types {
  id            Int             @id @default(autoincrement())
  type          String          @db.VarChar(255)
  verifications verifications[]
}
